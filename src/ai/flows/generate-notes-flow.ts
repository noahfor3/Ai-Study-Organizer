'use server';
/**
 * @fileOverview A Genkit flow for generating notes from document content.
 * (Currently returns pseudo-text for demonstration purposes).
 *
 * - generateNotes - A function that handles the note generation process.
 * - GenerateNotesInput - The input type for the generateNotes function.
 * - GenerateNotesOutput - The return type for the generateNotes function.
 */

import {ai} from '@/ai/genkit';
import {z}from 'genkit';

const GenerateNotesInputSchema = z.object({
  documentContent: z.string().min(50, { message: "Document content must be at least 50 characters long."})
    .describe("The text content from which to generate notes."),
  noteStyle: z.enum(['comprehensive', 'concise', 'bullet-points', 'outline']).optional().default('comprehensive')
    .describe("The style of notes to generate: comprehensive (detailed), concise (brief), bullet-points (list format), or outline (hierarchical structure)."),
  focusArea: z.string().optional()
    .describe("Optional focus area or topic to emphasize in the notes (e.g., 'key concepts', 'definitions', 'examples', 'applications')."),
});
export type GenerateNotesInput = z.infer<typeof GenerateNotesInputSchema>;

const GenerateNotesOutputSchema = z.object({
  notes: z.string().describe("The generated notes in a structured text format."),
});
export type GenerateNotesOutput = z.infer<typeof GenerateNotesOutputSchema>;


export async function generateNotes(input: GenerateNotesInput): Promise<GenerateNotesOutput> {
  // Validate input using the Zod schema
  const validationResult = GenerateNotesInputSchema.safeParse(input);
  if (!validationResult.success) {
    const errorMessages = validationResult.error.issues.map(issue => `${issue.path.join('.')} - ${issue.message}`).join('; ');
    throw new Error(`Invalid input: ${errorMessages}`);
  }

  console.log("SmartPath Notes: Generating AI-powered notes for document content starting with:", input.documentContent.substring(0, 50) + "...");
  
  try {
    // Use real AI to generate notes
    const { output } = await generateNotesCoreFlow(input);
    if (!output || !output.notes) {
      return { notes: "No notes could be generated by the AI. Please try with different content." };
    }
    return output;
  } catch (error) {
    console.error("AI Notes Generation Error:", error);
    // Fallback to pseudo-text if AI fails
    console.log("Falling back to pseudo-text generation...");
    
    let pseudoNotesContent = `## Generated Notes for: "${input.documentContent.substring(0,25)}..."\n\n`;
    pseudoNotesContent += `### Summary:\nThis document covers key topics related to "${input.documentContent.substring(0, 15)}...". The main concepts include important points about the subject matter.\n\n`;
    pseudoNotesContent += `### Key Points:\n`;
    pseudoNotesContent += `- Important concept: "${input.documentContent.substring(10, 30) || 'key topic'}"\n`;
    pseudoNotesContent += `- Related information: "${input.documentContent.substring(20, 40) || 'supporting details'}"\n`;
    pseudoNotesContent += `- Additional insights: Key takeaways from the document\n\n`;
    pseudoNotesContent += `*Note: This is a fallback summary. AI generation may be temporarily unavailable.*`;
    
    if (input.documentContent.length < 100) {
       pseudoNotesContent = `## Brief Notes: "${input.documentContent.substring(0,20)}..."\n\nSummary: This is a concise overview of the provided text covering "${input.documentContent.substring(0,10)}...".\n\n*Note: This is a fallback summary. AI generation may be temporarily unavailable.*`;
    }

    return { notes: pseudoNotesContent };
  }
}

// --- Genkit AI Flow and Prompt for Real AI Generation ---

const notesPrompt = ai.definePrompt({
  name: 'generateNotesPrompt',
  input: {schema: GenerateNotesInputSchema},
  output: {schema: GenerateNotesOutputSchema},
  prompt: `You are an expert in summarizing and extracting key information to create structured study notes.
Based on the following document content, generate notes in the requested style.
The notes should be well-organized, clear, and useful for studying.

Note Style: {{{noteStyle}}}
Focus Area: {{{focusArea}}}

For each style, use these formats:

**Comprehensive Style:**
## Summary
[Brief 2-3 sentence summary of the main topic]

## Key Concepts
- [Important concept 1 with detailed explanation]
- [Important concept 2 with detailed explanation]
- [Important concept 3 with detailed explanation]

## Important Details
[Any specific facts, numbers, dates, or technical details]

## Examples & Applications
[Real-world examples or practical applications]

## Takeaways
[Main points to remember or study further]

**Concise Style:**
## Summary
[One sentence summary]

## Key Points
- [Brief point 1]
- [Brief point 2]
- [Brief point 3]

## Important Details
[Essential facts only]

**Bullet-Points Style:**
• [Key point 1 with brief explanation]
• [Key point 2 with brief explanation]
• [Key point 3 with brief explanation]
• [Important detail 1]
• [Important detail 2]

**Outline Style:**
I. [Main topic 1]
   A. [Sub-topic 1.1]
   B. [Sub-topic 1.2]
II. [Main topic 2]
   A. [Sub-topic 2.1]
   B. [Sub-topic 2.2]

Document Content:
{{{documentContent}}}
`,
});

const generateNotesCoreFlow = ai.defineFlow(
  {
    name: 'generateNotesCoreFlow',
    inputSchema: GenerateNotesInputSchema,
    outputSchema: GenerateNotesOutputSchema,
  },
  async (input) => {
    const {output} = await notesPrompt(input);
    if (!output || !output.notes) {
      return { notes: "No notes could be generated by the AI." };
    }
    return output;
  }
);
